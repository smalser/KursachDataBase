using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using MySql.Data.MySqlClient;

namespace KursachBD
{
    public static class SQLConnection // Тут будем хранить статическое подключение
    {
        public static MySqlConnection connection; // Подключение

        public static void init()
        {
            string sql_string = "Database=bookshop;Data Source=localhost;User Id=root;Password=root";
            connection = new MySqlConnection(sql_string);
        }
    }

    public static class DataBase
    {
        static MySqlConnection connection = SQLConnection.connection; // Подключение

        public static Dictionary<String, DB_book> books = new Dictionary<String, DB_book>(); // База книг
        public static Dictionary<int, DB_shop> shops = new Dictionary<int, DB_shop>(); // База магазинов
        public static List<DB_store> stores = new List<DB_store>(); // Список хранилища


        static public void get_books(string where = "")
        {
            string text = "SELECT * FROM books"; // Стандартынй запрос
            if (where != "")
                text += " where " + where; // Если надо аргументы
            connection.Open(); // Открываем соединение
            MySqlCommand command = new MySqlCommand(text, connection); // Подаем запрос
            MySqlDataReader reader = command.ExecuteReader(); // Выполняем и смотрим вывод
            int k = 0; // Для справки

            while (reader.Read()) // Пока есть вывод
            {
                DB_book n = new DB_book(reader);
                // Если такого ид нет
                if (!books.ContainsKey(n.id))
                {
                    books.Add(n.id, n);
                    k++;
                    Console.WriteLine("Добавлена книга {0}", n.id);
                }
                else if (books.ContainsValue(n)) // Чисто для дебага
                    Console.WriteLine("Дублирован элемент {0}", n.id);
                else
                    Console.WriteLine("Ошибка в элементе {0}", n.id);
            }
            connection.Close(); // И закрываем
            Console.WriteLine("Изменено записей книг {0}", k);
        }

        static public void get_shops(string where = "")
        {
            string text = "SELECT * FROM shops"; // Стандартынй запрос
            if (where != "")
                text += " where " + where; // Если надо аргументы
            connection.Open(); // Открываем соединение
            MySqlCommand command = new MySqlCommand(text, connection); // Подаем запрос
            MySqlDataReader reader = command.ExecuteReader(); // Выполняем и смотрим вывод
            int k = 0; // Для справки

            while (reader.Read()) // Пока есть вывод
            {
                DB_shop n = new DB_shop(reader);
                // Если такого ид нет
                if (!shops.ContainsKey(n.id))
                {
                    shops.Add(n.id, n);
                    k++;
                    Console.WriteLine("Добавлен магазин {0}", n.id);
                }
                else if (shops.ContainsValue(n)) // Чисто для дебага
                    Console.WriteLine("Дублирован элемент {0}", n.id);
                else
                    Console.WriteLine("Ошибка в элементе {0}", n.id);
            }
            connection.Close(); // И закрываем
            Console.WriteLine("Изменено записей магазинов {0}", k);
        }

        static public void get_stores(string where = "")
        {

        }

        static public void execute(string a)
        {
            connection.Open(); // Открываем соединение
            MySqlCommand command = new MySqlCommand(a, connection); // Подаем запрос
            MySqlDataReader reader = command.ExecuteReader(); // Выполняем и смотрим вывод
            while (reader.Read())
            {
                Console.WriteLine(reader.ToString());
            }
            connection.Close();
        }

    }

    public class DB_book
    {
        public string id,
            name,
            author,
            city,
            publishing;
        public int year,
            price_in,
            price_out,
            count;
        public double rating_clients,
            rating_critic;


        public DB_book(MySqlDataReader reader)
        {
            id = reader.GetString(0);
            name = reader.GetString(1);
            author = reader.GetString(2);
            city = reader.GetString(3);
            publishing = reader.GetString(4);
            year = reader.GetInt16(5);
            price_in = reader.GetInt16(6);
            price_out = reader.GetInt16(7);
            count = reader.GetInt16(8);
            rating_clients = reader.GetFloat(9);
            rating_clients = reader.GetFloat(10);
        }

        public DB_book(string id, string name, string author, string city, string publishing, int year, int price_in, int price_out, int count, double rating_clients, double rating_critic)
        {
            this.id = id;
            this.name = name;
            this.author = author;
            this.city = city;
            this.publishing = publishing;

            this.year = year;

            this.price_in = price_in;
            this.price_out = price_out;
            this.count = count;

            this.rating_clients = rating_clients;
            this.rating_critic = rating_critic;

            // Добавляем себя в базу
            add();
            DataBase.get_books(); // и заново считываем
        }

        // Добавление в базу данных
        public void add() 
        {
            string text = string.Format("insert into books (id, name, author, city, publishing, year, price_in, price_out, count, rating_clients, rating_critic) " +
                "values ('{0}', '{1}', '{2}', '{3}', '{4}', {5}, {6}, {7}, {8}, {9}, {10})", 
                id, name, author, city, publishing, year, price_in, price_out, count, rating_clients.ToString().Replace(',','.'), rating_critic.ToString().Replace(',', '.'));

            DataBase.execute(text);
        }

        // Обновление в бази данных
        public void update()
        {
            string set = "";
            set += string.Format("name = '{0}', author = '{1}', city = '{2}', publishing = '{3}', year = {4}" +
                "price_in = {5}, price_out = {6}, count = {7}, rating_clients = {8}, rating_critic = {9}",
                name, author, city, publishing, year, price_in, price_in, price_out, count, rating_clients.ToString().Replace(',', '.'), rating_critic.ToString().Replace(',', '.'));

            string responce = string.Format("UPDATE books set ({0}) where id = '{1}'", set, id);
            DataBase.execute(responce);
        }

        // Удаление из базы данных
        public void delete()
        {
            string txt = "delete from books where id = '" + id + "'";
            DataBase.execute(txt);
        }


        ////////////////////////////////////////////////////////////
        // Тут оверрайды
        static public bool operator ==(DB_book a, DB_book b)
        {
            bool r = false;
            r = r && a.id == b.id;
            r = r && a.name == b.name;
            r = r && a.author == b.author;
            r = r && a.city == b.city;
            r = r && a.publishing == b.publishing;
            r = r && a.year == b.year;
            r = r && a.price_in == b.price_in;
            r = r && a.price_out == b.price_out;
            r = r && a.count == b.count;
            r = r && a.rating_clients == b.rating_clients;
            r = r && a.rating_critic == b.rating_critic;
            return r;
        }
        static public bool operator != (DB_book a, DB_book b)
        {
            return !(a == b);
        }
        public override bool Equals(object obj)
        {
            return this == (DB_book)obj;
        }
    }

    public class DB_shop
    {
        public int id;
        public string adress,
            telephone,
            worktime;


        public DB_shop(MySqlDataReader reader)
        {
            id = reader.GetInt32(0);
            adress = reader.GetString(1);
            telephone = reader.GetString(2);
            worktime = reader.GetString(3);
        }

        public DB_shop(int id, string adress, string telephone, string worktime)
        {
            this.id = id;
            this.adress = adress;
            this.telephone = telephone;
            this.worktime = worktime;

            // Добавляем себя в базу
            add();
            DataBase.get_shops(); // и заново считываем
        }

        // Добавление в базу данных
        public void add()
        {
            string text = string.Format("insert into shops (id, adress, telephone, worktime) " +
                "values ({0}, '{1}', '{2}', '{3}')",
                id, adress, telephone, worktime);

            DataBase.execute(text);
        }

        // Обновление в бази данных
        public void update()
        {
            string set = "";
            set += string.Format("adress = {0}, telephone = {1}, worktime = {2}",
                adress, telephone, worktime);

            string responce = string.Format("UPDATE books set ({0}) where id = {1}", set, id);
            DataBase.execute(responce);
        }

        // Удаление из базы данных
        public void delete()
        {
            string txt = "delete from books where id = " + id;
            DataBase.execute(txt);
        }


        ////////////////////////////////////////////////////////////
        // Тут оверрайды
        static public bool operator ==(DB_shop a, DB_shop b)
        {
            bool r = false;
            r = r && a.id == b.id;
            r = r && a.adress == b.adress;
            r = r && a.telephone == b.telephone;
            r = r && a.worktime == b.worktime;

            return r;
        }
        static public bool operator !=(DB_shop a, DB_shop b)
        {
            return !(a == b);
        }
        public override bool Equals(object obj)
        {
            return this == (DB_shop)obj;
        }
    }

    public class DB_store
    {
        public string book_id;
        public int shop_id,
            count;


        public DB_store(MySqlDataReader reader)
        {
            book_id = reader.GetString(0);
            shop_id = reader.GetInt32(1);
            count = reader.GetInt32(2);
        }

        public DB_store(string book_id, int shop_id, int count)
        {
            this.book_id = book_id;
            this.shop_id = shop_id;
            this.count = count;

            // Добавляем себя в базу
            add();
            DataBase.get_stores(); // и заново считываем
        }

        // Добавление в базу данных
        public void add()
        {
            string text = string.Format("insert into shops (book_id, shop_id, count) " +
                "values ('{0}', {1}, {2})",
                book_id, shop_id, count);

            DataBase.execute(text);
        }

        // Обновление в бази данных
        public void update()
        {
            string set = "";
            set += string.Format("count = {0}", count);

            string responce = string.Format("UPDATE books set ({0}) where book_id = '{1}' and shop_id = {2}", set, book_id, shop_id);
            DataBase.execute(responce);
        }

        // Удаление из базы данных
        public void delete()
        {
            string txt = string.Format("delete from books where book_id = '{0}' and shop_id = {1}", book_id, shop_id);
            DataBase.execute(txt);
        }


        ////////////////////////////////////////////////////////////
        // Тут оверрайды
        static public bool operator ==(DB_store a, DB_store b)
        {
            bool r = false;
            r = r && a.book_id == b.book_id;
            r = r && a.shop_id == b.shop_id;
            r = r && a.count == b.count;

            return r;
        }
        static public bool operator !=(DB_store a, DB_store b)
        {
            return !(a == b);
        }
        public override bool Equals(object obj)
        {
            return this == (DB_store)obj;
        }
    }

}

